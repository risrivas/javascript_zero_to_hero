# Chrome Developer Tools
# Ctrl-Shift-I

# Console

> alert("Hello World!")

> let js = 'amazing'

> if (js === 'amazing') alert('JavaScript is FUN!')

> js = 'boring'

> if (js === 'amazing') alert('JavaScript is FUN!')
# no alert 

> 40+8+23-10
61 

##############

# 01-Fundamentals-Part-1

####################
# Values and Variables
####################

- use 'let' to declare a variable
- variable can't start with number
- never put variable name as "name" as its reserved keyword but still can be used
- use '===' for equality check
- alert() for popup
- console.log() to print on console in Developer Tools
- text can be in single quotes or double quotes


####################
# Data Types
####################

Object or Primitives

- 7 primitives
Number = everything is float
String
Boolean = true or false
Undefined = empty value
Null
Symbol = immutable value
BigInt = same as BigInteger in java

- Dynamic typing: only use let to declare variables
- typeof <variable> is used to get the type of variable

- bug in JS
console.log(typeof null)

returns object


####################
# Declare variables
####################

- let
used for normal variables which can change value

- const
constant value

- var
never use it in modern js - because it is not scoped in blocks

- without let, const or var - creates a property on global object
ex:
lastName = 'Srivastava';
console.log(lastName);

this will work, but should never be used


####################
# Basic Operators
####################

- console.log can be used with comma 
- output will be space separated

const ageJonas = 2037 - 1991;
const ageSarah = 2037 - 2018;
console.log(ageJonas, ageSarah);

output: 
46 19

- can use all math operators: +-*/ **  
console.log(ageJonas * 2, ageSarah / 10, 2 ** 3);

- string concatenation is done using +
const firstName = 'Rishi';
const lastName = 'Srivastava';
console.log(firstName + ' ' + lastName);

- compound assignments are supported: += -= *= /= ++ --
- comparison operators: < > >= <= === 
- for documentation use: "mdn operator precedence" in google
- can define 2 variables at the same line
let x, y;













