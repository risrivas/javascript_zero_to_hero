#########################
# Chrome Developer Tools
# Ctrl-Shift-I
#########################

# Console

> alert("Hello World!")

> let js = 'amazing'

> if (js === 'amazing') alert('JavaScript is FUN!')

> js = 'boring'

> if (js === 'amazing') alert('JavaScript is FUN!')
# no alert

> 40+8+23-10
61

################
# Setup VS Code
################

# add Extension
Prettier - Code formatter

# Settings
- Set Default Formatter to Prettier ...
- format on save - ON
- auto save - onFocusChange
- tab size = 2

# set Color Theme to "Monokai Pro" Or "One Monokai Theme"
- left pane - bottom "Manage" => Color Theme => Chose "Monokai Pro"
- if not present, left pane - "Extensions" => "Monokai Pro" and install

OR else use "Monokai Classic" which does not require any installation

# VS Code settings
- left pane - "Manage" - "Settings"

AutoSave = onFocusChange
FontSize = 16 (optional)
Multi Cursor Modifier = ctrlCmd
Word Wrap = On
Format On Save = check

# Manage -> File Icon Theme
Chose "Seti (Visual Studio Code)"

##############

# 01-Fundamentals-Part-1

#######################
# Values and Variables
#######################

- use 'let' to declare a variable
- variable can't start with number
- never put variable name as "name" as its reserved keyword but still can be used
- use '===' for equality check
- alert() for popup
- console.log() to print on console in Developer Tools
- text can be in single quotes or double quotes or back ticks (``)


####################
# Data Types
####################

Object or Primitives

- 7 primitives
Number = everything is float
String
Boolean = true or false

Undefined = empty value
Null
Symbol = immutable value
BigInt = same as BigInteger in java

- Dynamic typing: only use 'let' or 'const' to declare variables
- typeof <variable> is used to get the type of variable

- bug in JS
console.log(typeof null)

returns object


####################
# Declare variables
####################

- let
used for normal variables which can change value

- const
constant value

- var
never use it in modern js - because it is not scoped in blocks

- if use without let, const or var - creates a property on global object
ex:
lastName = 'Srivastava';
console.log(lastName);

this will work, but should never be used


####################
# Basic Operators
####################

- console.log() can be used with comma
- output will be space separated

const ageJonas = 2037 - 1991;
const ageSarah = 2037 - 2018;
console.log(ageJonas, ageSarah);

output:
46 19

- can use all math operators: +-*/ **
console.log(ageJonas * 2, ageSarah / 10, 2 ** 3);

- compound assignments are supported: += -= *= /= ++ --
- comparison operators: < > >= <= ===
- for documentation use: "mdn operator precedence" in google
- can define 2 variables at the same line
let x, y;


################################
# Strings and Template Literals
################################

- string concatenation is done using +
const firstName = 'Rishi';
const lastName = 'Srivastava';
console.log(firstName + ' ' + lastName);

- use back ticks `` for template literals and use ${} to wrap a variable
ex:

const jonas = "I'm " + firstName + ', a ' + (year - birthYear) + " years old " + job + '!';
console.log(jonas);

const jonasNew = `I'm ${firstName}, a ${(year - birthYear)} years old ${job}!`;
console.log(jonasNew);

- back ticks can be used `` for all strings - no need to use '' or ""

- String with multiple lines - use \n\ at the end of each line
ex:
console.log('String with \n\
multiple \n\
lines');

- easier way : use back ticks again
console.log(`String with
multiple
lines`);


##########
# If/Else
##########

- syntax is similar to other languages
if (condition) {

} else {

}

- insert emoji in windows - "Windows + ."

## Challenge 2
- rounding of floating numbers to display only n decimals can be done by
number.toFixed(n)

example:
console.log(`Mark's BMI (${markBMI.toFixed(1)}) is higher than John's (${johnBMI.toFixed(1)})!`);


###############################
# Type Conversion and Coercion
###############################
- Conversion : when we manually convert from one type to another
- Coercion : javascript implicitly converts behind the scenes

# conversion
- can only convert number, string, boolean

- convert a string to number - similar to Integer.parseInt() in Java
Number('1991') => 1991
Number('Jonas') => NaN

- wierd:
console.log(typeof NaN); // returns 'number'

- convert a number to string
String(23) => '23'

# coercion
- if a string is used with a number with + sign, number is converted to string
console.log('I am ' + 23 + ' years old'); // converts 23 to String
console.log(1991 + '23'); // 199123
console.log('23' + '10' + 3); // 23103

- however, if there is any other sign (-*/), it will use numbers
console.log('23' - '10' - 3); // 10
console.log('23' + '10' - 3); // 2307

console.log('23' * '2'); // 46
console.log('46' / '2'); // 23
console.log('23' > '10'); // true


##########################
# Truthy and Falsy values
##########################
- 5 falsy values: 0, '', undefined, null, NaN
- example:
console.log(Boolean(0)); // false
console.log(Boolean(undefined)); // false

- type coercion happens to use boolean


#################################
# Equality operators: == vs ===
#################################
- Tripe equals (===) is strict equality - does NOT allow type coercion
- Double equals (==) does type coercion
- best practice is to use triple equals (===)
- example:
18 === 18 // true
'18' === 18 // false

18 == 18 // true
'18' == 18 // true

- use prompt() to get user input - similar to input() in python
prompt("What's your favorite number?")

- convert the input to number:
Number(prompt("What's your favorite number?"))

- similarly for negating, !== (strict) and != (lose)


####################
# Boolean operators
####################
- basic = AND (&&), OR (||), NOT (!)
- NOT operator has highest precedence


























